
---

### 5. **Ask the user for a key and check if its value contains only alphabets.**  
   **User Input:**  
   ```
   Enter key to check: name  
   ```  
   **Output:**  
   ```
   The value of 'name' contains only alphabets.
   ```

---

### 6. **Reverse the order of key-value pairs in the dictionary.**  
   **User Input:**  
   ```
   (No input required)  
   ```  
   **Output:**  
   ```
   Reversed Dictionary: {'city': 'New York', 'age': '25', 'name': 'Alice'}
   ```

---

### 7. **Ask the user for a key and append its value to a list.**  
   **User Input:**  
   ```
   Enter key to append value: age  
   ```  
   **Output:**  
   ```
   Value list: [25]
   ```

---

### 8. **Find the shortest key in the dictionary.**  
   **User Input:**  
   ```
   (No input required)  
   ```  
   **Output:**  
   ```
   The shortest key is: age
   ```

---

### 9. **Find keys that start with a vowel.**  
   **User Input:**  
   ```
   (No input required)  
   ```  
   **Output:**  
   ```
   Keys starting with vowels: ['age']
   ```

---

### 10. **Replace a specific character in all string values.**  
   **User Input:**  
   ```
   Enter character to replace: A  
   Enter new character: X  
   ```  
   **Output:**  
   ```
   Updated Dictionary: {'name': 'Xlice', 'city': 'New York'}
   ```

---

### 11. **Ask the user to create a dictionary using a single input (comma-separated).**  
   **User Input:**  
   ```
   Enter key-value pairs (e.g., name:Alice, age:25):  
   ```  
   **Output:**  
   ```
   Created Dictionary: {'name': 'Alice', 'age': '25'}
   ```

---

### 12. **Remove all keys that contain numbers.**  
   **User Input:**  
   ```
   (No input required)  
   ```  
   **Output:**  
   ```
   Updated Dictionary: {'name': 'Alice'}
   ```

---

### 13. **Ask the user to add a new key, but prevent duplicates.**  
   **User Input:**  
   ```
   Enter key: name  
   ```  
   **Output:**  
   ```
   Key already exists! Try a different key.
   ```

---

### 14. **Convert a dictionary to a list of tuples.**  
   **User Input:**  
   ```
   (No input required)  
   ```  
   **Output:**  
   ```
   Dictionary as tuples: [('name', 'Alice'), ('age', '25')]
   ```

---

### 15. **Check if two keys have the same value.**  
   **User Input:**  
   ```
   Enter first key: age  
   Enter second key: years  
   ```  
   **Output:**  
   ```
   Both keys have the same value.
   ```

---

### 16. **Find the number of unique values in the dictionary.**  
   **User Input:**  
   ```
   (No input required)  
   ```  
   **Output:**  
   ```
   There are 3 unique values in the dictionary.
   ```

---

### 17. **Ask the user to remove keys that have empty values.**  
   **User Input:**  
   ```
   (No input required)  
   ```  
   **Output:**  
   ```
   Updated Dictionary: {'name': 'Alice', 'age': '25'}
   ```

---

### 18. **Find and replace all numeric values with their square.**  
   **User Input:**  
   ```
   (No input required)  
   ```  
   **Output:**  
   ```
   Updated Dictionary: {'name': 'Alice', 'age': '625'}
   ```

---

### 19. **Ask the user for a key and check if its value is a palindrome.**  
   **User Input:**  
   ```
   Enter key: word  
   ```  
   **Output:**  
   ```
   The value of 'word' is a palindrome.
   ```

---

### 20. **Sort the dictionary by value length.**  
   **User Input:**  
   ```
   (No input required)  
   ```  
   **Output:**  
   ```
   Sorted Dictionary: {'age': '25', 'name': 'Alice', 'city': 'New York'}
   ```

---

These questions are **new, challenging, and interactive** while covering multiple dictionary operations! ðŸš€